// Code generated by protoc-gen-go.
// source: bucket.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	bucket.proto
	registry.proto

It has these top-level messages:
	NewItem
	Page
	Key
	Item
	NewBucket
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto2 "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type NewItem struct {
	Bucket string `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	Item   *Item  `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *NewItem) Reset()                    { *m = NewItem{} }
func (m *NewItem) String() string            { return proto1.CompactTextString(m) }
func (*NewItem) ProtoMessage()               {}
func (*NewItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NewItem) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *NewItem) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type Page struct {
	Bucket  string `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	Page    int32  `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	PerPage int32  `protobuf:"varint,3,opt,name=perPage" json:"perPage,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto1.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Page) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *Page) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Page) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type Key struct {
	Bucket string `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto1.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Key) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Item struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto1.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Item) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Item) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto1.RegisterType((*NewItem)(nil), "proto.NewItem")
	proto1.RegisterType((*Page)(nil), "proto.Page")
	proto1.RegisterType((*Key)(nil), "proto.Key")
	proto1.RegisterType((*Item)(nil), "proto.Item")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BucketService service

type BucketServiceClient interface {
	// Put user data
	Put(ctx context.Context, opts ...grpc.CallOption) (BucketService_PutClient, error)
	// Get an item
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Item, error)
	// Delete an item
	Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*proto2.Empty, error)
	// List the bucket content
	List(ctx context.Context, in *Page, opts ...grpc.CallOption) (BucketService_ListClient, error)
}

type bucketServiceClient struct {
	cc *grpc.ClientConn
}

func NewBucketServiceClient(cc *grpc.ClientConn) BucketServiceClient {
	return &bucketServiceClient{cc}
}

func (c *bucketServiceClient) Put(ctx context.Context, opts ...grpc.CallOption) (BucketService_PutClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BucketService_serviceDesc.Streams[0], c.cc, "/proto.BucketService/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &bucketServicePutClient{stream}
	return x, nil
}

type BucketService_PutClient interface {
	Send(*NewItem) error
	CloseAndRecv() (*proto2.Empty, error)
	grpc.ClientStream
}

type bucketServicePutClient struct {
	grpc.ClientStream
}

func (x *bucketServicePutClient) Send(m *NewItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bucketServicePutClient) CloseAndRecv() (*proto2.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(proto2.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bucketServiceClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := grpc.Invoke(ctx, "/proto.BucketService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*proto2.Empty, error) {
	out := new(proto2.Empty)
	err := grpc.Invoke(ctx, "/proto.BucketService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) List(ctx context.Context, in *Page, opts ...grpc.CallOption) (BucketService_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BucketService_serviceDesc.Streams[1], c.cc, "/proto.BucketService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &bucketServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BucketService_ListClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type bucketServiceListClient struct {
	grpc.ClientStream
}

func (x *bucketServiceListClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BucketService service

type BucketServiceServer interface {
	// Put user data
	Put(BucketService_PutServer) error
	// Get an item
	Get(context.Context, *Key) (*Item, error)
	// Delete an item
	Delete(context.Context, *Key) (*proto2.Empty, error)
	// List the bucket content
	List(*Page, BucketService_ListServer) error
}

func RegisterBucketServiceServer(s *grpc.Server, srv BucketServiceServer) {
	s.RegisterService(&_BucketService_serviceDesc, srv)
}

func _BucketService_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BucketServiceServer).Put(&bucketServicePutServer{stream})
}

type BucketService_PutServer interface {
	SendAndClose(*proto2.Empty) error
	Recv() (*NewItem, error)
	grpc.ServerStream
}

type bucketServicePutServer struct {
	grpc.ServerStream
}

func (x *bucketServicePutServer) SendAndClose(m *proto2.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bucketServicePutServer) Recv() (*NewItem, error) {
	m := new(NewItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BucketService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BucketService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BucketService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).Delete(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Page)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BucketServiceServer).List(m, &bucketServiceListServer{stream})
}

type BucketService_ListServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type bucketServiceListServer struct {
	grpc.ServerStream
}

func (x *bucketServiceListServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

var _BucketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BucketService",
	HandlerType: (*BucketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _BucketService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BucketService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Put",
			Handler:       _BucketService_Put_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _BucketService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bucket.proto",
}

func init() { proto1.RegisterFile("bucket.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x90, 0xdd, 0x4a, 0xc3, 0x40,
	0x10, 0x85, 0xbb, 0xe6, 0xa7, 0x74, 0x12, 0x45, 0x06, 0x91, 0x90, 0x1b, 0xc3, 0x52, 0x30, 0x57,
	0x51, 0xea, 0x1b, 0x14, 0x45, 0xa4, 0x45, 0x4a, 0x7c, 0x82, 0xb4, 0x0c, 0x25, 0xb4, 0xa1, 0x4b,
	0x3a, 0xa9, 0xec, 0x0b, 0xf9, 0x9c, 0x92, 0xdd, 0xad, 0xd8, 0x42, 0xaf, 0x32, 0x67, 0xce, 0x9c,
	0x2f, 0x3b, 0x03, 0xf1, 0xb2, 0x5b, 0x6d, 0x88, 0x0b, 0xd5, 0xee, 0x78, 0x87, 0x81, 0xf9, 0xa4,
	0x11, 0x6b, 0x45, 0x7b, 0xdb, 0x93, 0x53, 0x18, 0x7e, 0xd2, 0xf7, 0x07, 0x53, 0x83, 0xf7, 0x10,
	0xda, 0xf1, 0x44, 0x64, 0x22, 0x1f, 0x95, 0x4e, 0xe1, 0x03, 0xf8, 0x35, 0x53, 0x93, 0x5c, 0x65,
	0x22, 0x8f, 0x26, 0x91, 0x0d, 0x16, 0x7d, 0xa4, 0x34, 0x86, 0x9c, 0x83, 0xbf, 0xa8, 0xd6, 0x74,
	0x11, 0x80, 0xe0, 0xab, 0x6a, 0x4d, 0x06, 0x10, 0x94, 0xa6, 0xc6, 0x04, 0x86, 0x8a, 0xda, 0x3e,
	0x96, 0x78, 0xa6, 0x7d, 0x94, 0xf2, 0x09, 0xbc, 0x19, 0xe9, 0x8b, 0xb0, 0x5b, 0xf0, 0x36, 0xa4,
	0x0d, 0x6b, 0x54, 0xf6, 0xa5, 0x2c, 0xc0, 0x37, 0xef, 0x77, 0x8e, 0xf8, 0x73, 0xf0, 0x0e, 0x82,
	0x43, 0xb5, 0xed, 0xec, 0x9f, 0xe3, 0xd2, 0x8a, 0xc9, 0x8f, 0x80, 0xeb, 0xa9, 0x81, 0x7d, 0x51,
	0x7b, 0xa8, 0x57, 0x84, 0x8f, 0xe0, 0x2d, 0x3a, 0xc6, 0x1b, 0xb7, 0x9a, 0x3b, 0x48, 0x1a, 0x3b,
	0xfd, 0xd6, 0x28, 0xd6, 0x72, 0x90, 0x0b, 0xcc, 0xc0, 0x7b, 0x27, 0x46, 0x70, 0xc6, 0x8c, 0x74,
	0xfa, 0xff, 0x1e, 0x72, 0x80, 0x63, 0x08, 0x5f, 0x69, 0x4b, 0x4c, 0x27, 0x43, 0x67, 0x24, 0x1c,
	0x83, 0x3f, 0xaf, 0xf7, 0x8c, 0xc7, 0x70, 0xbf, 0xf8, 0x19, 0xe9, 0x59, 0x2c, 0x43, 0xa3, 0x5f,
	0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x06, 0xb5, 0x45, 0xc6, 0x01, 0x00, 0x00,
}
