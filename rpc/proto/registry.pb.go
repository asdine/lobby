// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NewBucket struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Backend string `protobuf:"bytes,2,opt,name=backend" json:"backend,omitempty"`
}

func (m *NewBucket) Reset()                    { *m = NewBucket{} }
func (m *NewBucket) String() string            { return proto1.CompactTextString(m) }
func (*NewBucket) ProtoMessage()               {}
func (*NewBucket) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *NewBucket) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewBucket) GetBackend() string {
	if m != nil {
		return m.Backend
	}
	return ""
}

func init() {
	proto1.RegisterType((*NewBucket)(nil), "proto.NewBucket")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RegistryService service

type RegistryServiceClient interface {
	Create(ctx context.Context, in *NewBucket, opts ...grpc.CallOption) (*Empty, error)
}

type registryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRegistryServiceClient(cc *grpc.ClientConn) RegistryServiceClient {
	return &registryServiceClient{cc}
}

func (c *registryServiceClient) Create(ctx context.Context, in *NewBucket, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.RegistryService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RegistryService service

type RegistryServiceServer interface {
	Create(context.Context, *NewBucket) (*Empty, error)
}

func RegisterRegistryServiceServer(s *grpc.Server, srv RegistryServiceServer) {
	s.RegisterService(&_RegistryService_serviceDesc, srv)
}

func _RegistryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RegistryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).Create(ctx, req.(*NewBucket))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RegistryService",
	HandlerType: (*RegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RegistryService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}

func init() { proto1.RegisterFile("registry.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4a, 0x4d, 0xcf,
	0x2c, 0x2e, 0x29, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0xdc,
	0x25, 0x95, 0x05, 0xa9, 0xc5, 0x10, 0x31, 0x25, 0x4b, 0x2e, 0x4e, 0xbf, 0xd4, 0x72, 0xa7, 0xd2,
	0xe4, 0xec, 0xd4, 0x12, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0xce, 0x20, 0x30, 0x5b, 0x48, 0x82, 0x8b, 0x3d, 0x29, 0x31, 0x39, 0x3b, 0x35, 0x2f, 0x45,
	0x82, 0x09, 0x2c, 0x0c, 0xe3, 0x1a, 0xd9, 0x72, 0xf1, 0x07, 0x41, 0x2d, 0x08, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x15, 0xd2, 0xe2, 0x62, 0x73, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x15, 0x12, 0x80,
	0x98, 0xaf, 0x07, 0x37, 0x5c, 0x8a, 0x07, 0x2a, 0xe2, 0x9a, 0x5b, 0x50, 0x52, 0xa9, 0xc4, 0x90,
	0xc4, 0x06, 0xe6, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x11, 0x1b, 0xff, 0x5f, 0xa6, 0x00,
	0x00, 0x00,
}
