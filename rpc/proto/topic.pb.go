// Code generated by protoc-gen-go.
// source: topic.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	topic.proto
	registry.proto

It has these top-level messages:
	Empty
	NewMessage
	Message
	NewTopic
	Topic
	TopicStatus
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Empty response.
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// NewMessage is used to put an item in a topic.
type NewMessage struct {
	// Topic name.
	// @inject_tag: valid:"required"
	Topic string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty" valid:"required"`
	// Message to send to the topic.
	// @inject_tag: valid:"required"
	Message *Message `protobuf:"bytes,2,opt,name=message" json:"message,omitempty" valid:"required"`
}

func (m *NewMessage) Reset()                    { *m = NewMessage{} }
func (m *NewMessage) String() string            { return proto1.CompactTextString(m) }
func (*NewMessage) ProtoMessage()               {}
func (*NewMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NewMessage) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type Message struct {
	Group string `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	// @inject_tag: valid:"required"
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" valid:"required"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto1.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*NewMessage)(nil), "proto.NewMessage")
	proto1.RegisterType((*Message)(nil), "proto.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for TopicService service

type TopicServiceClient interface {
	// Send message to the topic.
	Send(ctx context.Context, in *NewMessage, opts ...grpc.CallOption) (*Empty, error)
}

type topicServiceClient struct {
	cc *grpc.ClientConn
}

func NewTopicServiceClient(cc *grpc.ClientConn) TopicServiceClient {
	return &topicServiceClient{cc}
}

func (c *topicServiceClient) Send(ctx context.Context, in *NewMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.TopicService/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TopicService service

type TopicServiceServer interface {
	// Send message to the topic.
	Send(context.Context, *NewMessage) (*Empty, error)
}

func RegisterTopicServiceServer(s *grpc.Server, srv TopicServiceServer) {
	s.RegisterService(&_TopicService_serviceDesc, srv)
}

func _TopicService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TopicService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).Send(ctx, req.(*NewMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _TopicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TopicService",
	HandlerType: (*TopicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _TopicService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto1.RegisterFile("topic.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xc9, 0x2f, 0xc8,
	0x4c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xec, 0x5c, 0xac, 0xae,
	0xb9, 0x05, 0x25, 0x95, 0x4a, 0x3e, 0x5c, 0x5c, 0x7e, 0xa9, 0xe5, 0xbe, 0xa9, 0xc5, 0xc5, 0x89,
	0xe9, 0xa9, 0x42, 0x22, 0x5c, 0xac, 0x60, 0xc5, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10,
	0x8e, 0x90, 0x06, 0x17, 0x7b, 0x2e, 0x44, 0x81, 0x04, 0x93, 0x02, 0xa3, 0x06, 0xb7, 0x11, 0x1f,
	0xc4, 0x30, 0x3d, 0xa8, 0xb6, 0x20, 0x98, 0xb4, 0x92, 0x29, 0x17, 0x3b, 0x92, 0x51, 0xe9, 0x45,
	0xf9, 0xa5, 0x05, 0x30, 0xa3, 0xc0, 0x1c, 0x90, 0x68, 0x59, 0x62, 0x4e, 0x29, 0xc4, 0x20, 0x9e,
	0x20, 0x08, 0xc7, 0xc8, 0x92, 0x8b, 0x27, 0x04, 0x64, 0x53, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72,
	0xaa, 0x90, 0x26, 0x17, 0x4b, 0x70, 0x6a, 0x5e, 0x8a, 0x90, 0x20, 0xd4, 0x1e, 0x84, 0x0b, 0xa5,
	0x78, 0xa0, 0x42, 0x10, 0xd7, 0x33, 0x24, 0xb1, 0x81, 0xb9, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x93, 0x32, 0x15, 0x65, 0xe5, 0x00, 0x00, 0x00,
}
